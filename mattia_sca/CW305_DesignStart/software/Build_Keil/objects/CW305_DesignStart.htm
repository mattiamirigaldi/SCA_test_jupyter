<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\objects\CW305_DesignStart.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\objects\CW305_DesignStart.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Thu Nov 23 18:21:05 2023
<BR><P>
<H3>Maximum Stack Usage =        240 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; simpleserial_get
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[4]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">NMI_Handler</a><BR>
 <LI><a href="#[5]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">HardFault_Handler</a><BR>
 <LI><a href="#[6]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">MemManage_Handler</a><BR>
 <LI><a href="#[7]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">BusFault_Handler</a><BR>
 <LI><a href="#[8]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">UsageFault_Handler</a><BR>
 <LI><a href="#[9]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SVC_Handler</a><BR>
 <LI><a href="#[a]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">DebugMon_Handler</a><BR>
 <LI><a href="#[b]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">PendSV_Handler</a><BR>
 <LI><a href="#[c]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">SysTick_Handler</a><BR>
 <LI><a href="#[14]">DAPLinkFittedn</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">DAPLinkFittedn</a><BR>
 <LI><a href="#[42]">XUartLite_SendByte</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[42]">XUartLite_SendByte</a><BR>
 <LI><a href="#[45]">XUartLite_RecvByte</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[45]">XUartLite_RecvByte</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[7]">BusFault_Handler</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[14]">DAPLinkFittedn</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[11]">DAP_QSPI0_Handler</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[13]">DAP_QSPI_XIP_Handler</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[12]">DAP_SPI0_Handler</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[a]">DebugMon_Handler</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[e]">GPIO0_Handler</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[f]">GPIO1_Handler</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[5]">HardFault_Handler</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[6]">MemManage_Handler</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[4]">NMI_Handler</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[b]">PendSV_Handler</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[10]">QSPI0_Handler</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[5d]">RecvHandler</a> from uart.o(.text) referenced from uart.o(.text)
 <LI><a href="#[30]">Reset_Handler</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[9]">SVC_Handler</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[5b]">SendHandler</a> from uart.o(.text) referenced from uart.o(.text)
 <LI><a href="#[2f]">StubHandler</a> from xuartlite.o(.text) referenced from xuartlite.o(.text)
 <LI><a href="#[c]">SysTick_Handler</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[2d]">SystemInit</a> from system_arty_cm3.o(.text) referenced from startup_arty_cm3.o(.text)
 <LI><a href="#[d]">UART0_Handler</a> from uart.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[17]">Unused_IRQ10</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[18]">Unused_IRQ11</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[19]">Unused_IRQ12</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[1a]">Unused_IRQ13</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[1b]">Unused_IRQ14</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[1c]">Unused_IRQ15</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[1d]">Unused_IRQ16</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[1e]">Unused_IRQ17</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[1f]">Unused_IRQ18</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[20]">Unused_IRQ19</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[21]">Unused_IRQ20</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[22]">Unused_IRQ21</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[23]">Unused_IRQ22</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[24]">Unused_IRQ23</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[25]">Unused_IRQ24</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[26]">Unused_IRQ25</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[27]">Unused_IRQ26</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[28]">Unused_IRQ27</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[29]">Unused_IRQ28</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[2a]">Unused_IRQ29</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[2b]">Unused_IRQ30</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[2c]">Unused_IRQ31</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[15]">Unused_IRQ8</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[16]">Unused_IRQ9</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[8]">UsageFault_Handler</a> from startup_arty_cm3.o(.text) referenced from startup_arty_cm3.o(RESET)
 <LI><a href="#[31]">__main</a> from __main.o(!!!main) referenced from startup_arty_cm3.o(.text)
 <LI><a href="#[70]">check_version</a> from simpleserial.o(.text) referenced from simpleserial.o(.text)
 <LI><a href="#[48]">get_key</a> from cw_main.o(.text) referenced from cw_main.o(.text)
 <LI><a href="#[46]">get_mask</a> from cw_main.o(.text) referenced from cw_main.o(.text)
 <LI><a href="#[4a]">get_pt</a> from cw_main.o(.text) referenced from cw_main.o(.text)
 <LI><a href="#[4f]">info</a> from cw_main.o(.text) referenced from cw_main.o(.text)
 <LI><a href="#[55]">reset</a> from cw_main.o(.text) referenced from cw_main.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[31]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[33]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[35]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[85]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[86]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[87]"></a>__decompress</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(!!dczerorl), UNUSED)

<P><STRONG><a name="[88]"></a>__decompress0</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(!!dczerorl), UNUSED)

<P><STRONG><a name="[89]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[39]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[8a]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[8b]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[8c]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[8d]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[8e]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[8f]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[90]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[91]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[92]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[93]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[94]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[95]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[96]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[97]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[98]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[99]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[9a]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[9b]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[9c]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[9d]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[9e]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[3e]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[9f]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[a0]"></a>__rt_lib_shutdown_fini_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[a1]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[a2]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000011))

<P><STRONG><a name="[a3]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000012))

<P><STRONG><a name="[a4]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[a5]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[a6]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[34]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[a7]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[36]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[38]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[a8]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[3a]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; simpleserial_get
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a9]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[84]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[3d]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[aa]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[3f]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[ab]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_arty_cm3.o(.text), UNUSED)

<P><STRONG><a name="[2d]"></a>SystemInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(.text)
</UL>
<P><STRONG><a name="[30]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))

<P><STRONG><a name="[4]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>DAPLinkFittedn</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAPLinkFittedn
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAPLinkFittedn
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>DAP_QSPI0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>DAP_QSPI_XIP_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>DAP_SPI0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>GPIO0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>GPIO1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>QSPI0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>Unused_IRQ10</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>Unused_IRQ11</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>Unused_IRQ12</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>Unused_IRQ13</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>Unused_IRQ14</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>Unused_IRQ15</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>Unused_IRQ16</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>Unused_IRQ17</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>Unused_IRQ18</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>Unused_IRQ19</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>Unused_IRQ20</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>Unused_IRQ21</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>Unused_IRQ22</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>Unused_IRQ23</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>Unused_IRQ24</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>Unused_IRQ25</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>Unused_IRQ26</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>Unused_IRQ27</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>Unused_IRQ28</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>Unused_IRQ29</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>Unused_IRQ30</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>Unused_IRQ31</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>Unused_IRQ8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>Unused_IRQ9</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>__user_initial_stackheap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, startup_arty_cm3.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[41]"></a>outbyte</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, outbyte.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleserial_put
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleserial_get
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
</UL>

<P><STRONG><a name="[43]"></a>print</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, print.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = print
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outbyte
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;info
</UL>

<P><STRONG><a name="[64]"></a>Xil_Assert</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, xil_assert.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_GetStats
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_DisableInterrupt
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_ClearStats
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_IsSending
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_ResetFifos
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_Send
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_CfgInitialize
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StubHandler
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_DiscreteRead
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_GetDataDirection
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_CfgInitialize
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_SetSendHandler
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_SetRecvHandler
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_Recv
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_InterruptHandler
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_Initialize
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_EnableInterrupt
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_SetDataDirection
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_Initialize
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_DiscreteWrite
</UL>

<P><STRONG><a name="[ac]"></a>Xil_AssertSetCallback</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, xil_assert.o(.text), UNUSED)

<P><STRONG><a name="[ad]"></a>XNullHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, xil_assert.o(.text), UNUSED)

<P><STRONG><a name="[44]"></a>inbyte</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, inbyte.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_RecvByte
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleserial_get
</UL>

<P><STRONG><a name="[46]"></a>get_mask</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cw_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_mask
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_indep_mask
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cw_main.o(.text)
</UL>
<P><STRONG><a name="[48]"></a>get_key</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cw_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_key &rArr; aes_indep_key &rArr; AES128_ECB_indp_setkey &rArr; KeyExpansion
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_indep_key
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cw_main.o(.text)
</UL>
<P><STRONG><a name="[4a]"></a>get_pt</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, cw_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = get_pt &rArr; aes_indep_enc &rArr; AES128_ECB_indp_crypto &rArr; Cipher
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleserial_put
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_indep_enc
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTrig
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearTrig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cw_main.o(.text)
</UL>
<P><STRONG><a name="[55]"></a>reset</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cw_main.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> cw_main.o(.text)
</UL>
<P><STRONG><a name="[4f]"></a>info</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, cw_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = info &rArr; print
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cw_main.o(.text)
</UL>
<P><STRONG><a name="[3b]"></a>main</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, cw_main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = main &rArr; simpleserial_get
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleserial_init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleserial_get
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simpleserial_addcmd
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_indep_key
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_indep_init
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseUART
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseGPIO
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[4d]"></a>ClearTrig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cw_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ClearTrig &rArr; XGpio_DiscreteWrite &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_DiscreteWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pt
</UL>

<P><STRONG><a name="[50]"></a>InitialiseGPIO</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, cw_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = InitialiseGPIO &rArr; XGpio_SetDataDirection &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_SetDataDirection
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_Initialize
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_DiscreteWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4b]"></a>SetTrig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, cw_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SetTrig &rArr; XGpio_DiscreteWrite &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_DiscreteWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pt
</UL>

<P><STRONG><a name="[5d]"></a>RecvHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> uart.o(.text)
</UL>
<P><STRONG><a name="[5b]"></a>SendHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> uart.o(.text)
</UL>
<P><STRONG><a name="[51]"></a>InitialiseUART</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = InitialiseUART &rArr; XUartLite_Initialize &rArr; XUartLite_CfgInitialize &rArr; XUartLite_ClearStats &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_SetSendHandler
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_SetRecvHandler
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_Recv
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_Initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ae]"></a>CheckUARTRxBytes</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)

<P><STRONG><a name="[60]"></a>EnableUARTInterrupts</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_EnableInterrupt
</UL>

<P><STRONG><a name="[d]"></a>UART0_Handler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART0_Handler &rArr; XUartLite_InterruptHandler &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_InterruptHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_arty_cm3.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>XGpio_CfgInitialize</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, xgpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = XGpio_CfgInitialize &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_Initialize
</UL>

<P><STRONG><a name="[59]"></a>XGpio_SetDataDirection</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, xgpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = XGpio_SetDataDirection &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseGPIO
</UL>

<P><STRONG><a name="[65]"></a>XGpio_GetDataDirection</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, xgpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[66]"></a>XGpio_DiscreteRead</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, xgpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[57]"></a>XGpio_DiscreteWrite</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, xgpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = XGpio_DiscreteWrite &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetTrig
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseGPIO
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClearTrig
</UL>

<P><STRONG><a name="[af]"></a>XGpio_LookupConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, xgpio_sinit.o(.text), UNUSED)

<P><STRONG><a name="[58]"></a>XGpio_Initialize</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, xgpio_sinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = XGpio_Initialize &rArr; XGpio_CfgInitialize &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XGpio_CfgInitialize
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseGPIO
</UL>

<P><STRONG><a name="[67]"></a>XUartLite_CfgInitialize</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, xuartlite.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = XUartLite_CfgInitialize &rArr; XUartLite_ClearStats &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_ClearStats
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_Initialize
</UL>

<P><STRONG><a name="[6d]"></a>XUartLite_SendBuffer</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, xuartlite.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_InterruptHandler
</UL>

<P><STRONG><a name="[69]"></a>XUartLite_Send</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, xuartlite.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[6c]"></a>XUartLite_ReceiveBuffer</STRONG> (Thumb, 120 bytes, Stack size 4 bytes, xuartlite.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = XUartLite_ReceiveBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_InterruptHandler
</UL>

<P><STRONG><a name="[5f]"></a>XUartLite_Recv</STRONG> (Thumb, 236 bytes, Stack size 16 bytes, xuartlite.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = XUartLite_Recv &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseUART
</UL>

<P><STRONG><a name="[6a]"></a>XUartLite_ResetFifos</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, xuartlite.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[6b]"></a>XUartLite_IsSending</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, xuartlite.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[5e]"></a>XUartLite_SetRecvHandler</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, xuartlite_intr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = XUartLite_SetRecvHandler &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseUART
</UL>

<P><STRONG><a name="[5c]"></a>XUartLite_SetSendHandler</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, xuartlite_intr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = XUartLite_SetSendHandler &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseUART
</UL>

<P><STRONG><a name="[62]"></a>XUartLite_InterruptHandler</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, xuartlite_intr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = XUartLite_InterruptHandler &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_ReceiveBuffer
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_SendBuffer
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Handler
</UL>

<P><STRONG><a name="[6e]"></a>XUartLite_DisableInterrupt</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, xuartlite_intr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[61]"></a>XUartLite_EnableInterrupt</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, xuartlite_intr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableUARTInterrupts
</UL>

<P><STRONG><a name="[42]"></a>XUartLite_SendByte</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, xuartlite_l.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_SendByte
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_SendByte
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outbyte
</UL>

<P><STRONG><a name="[45]"></a>XUartLite_RecvByte</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, xuartlite_l.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_RecvByte
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_RecvByte
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inbyte
</UL>

<P><STRONG><a name="[b0]"></a>XUartLite_LookupConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, xuartlite_sinit.o(.text), UNUSED)

<P><STRONG><a name="[5a]"></a>XUartLite_Initialize</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, xuartlite_sinit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = XUartLite_Initialize &rArr; XUartLite_CfgInitialize &rArr; XUartLite_ClearStats &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_CfgInitialize
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitialiseUART
</UL>

<P><STRONG><a name="[6f]"></a>XUartLite_GetStats</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, xuartlite_stats.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>

<P><STRONG><a name="[68]"></a>XUartLite_ClearStats</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, xuartlite_stats.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = XUartLite_ClearStats &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XUartLite_CfgInitialize
</UL>

<P><STRONG><a name="[b1]"></a>hex_decode</STRONG> (Thumb, 160 bytes, Stack size 20 bytes, simpleserial.o(.text), UNUSED)

<P><STRONG><a name="[70]"></a>check_version</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, simpleserial.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> simpleserial.o(.text)
</UL>
<P><STRONG><a name="[54]"></a>simpleserial_addcmd</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, simpleserial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = simpleserial_addcmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[53]"></a>simpleserial_init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, simpleserial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = simpleserial_init
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4e]"></a>simpleserial_put</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, simpleserial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = simpleserial_put
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outbyte
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pt
</UL>

<P><STRONG><a name="[56]"></a>simpleserial_get</STRONG> (Thumb, 368 bytes, Stack size 224 bytes, simpleserial.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = simpleserial_get
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inbyte
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;outbyte
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[52]"></a>aes_indep_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, aes-independant.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[49]"></a>aes_indep_key</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, aes-independant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = aes_indep_key &rArr; AES128_ECB_indp_setkey &rArr; KeyExpansion
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES128_ECB_indp_setkey
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_key
</UL>

<P><STRONG><a name="[4c]"></a>aes_indep_enc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, aes-independant.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = aes_indep_enc &rArr; AES128_ECB_indp_crypto &rArr; Cipher
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES128_ECB_indp_crypto
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_pt
</UL>

<P><STRONG><a name="[47]"></a>aes_indep_mask</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, aes-independant.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mask
</UL>

<P><STRONG><a name="[71]"></a>AES128_ECB_indp_setkey</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = AES128_ECB_indp_setkey &rArr; KeyExpansion
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyExpansion
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_indep_key
</UL>

<P><STRONG><a name="[72]"></a>AES128_ECB_indp_crypto</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AES128_ECB_indp_crypto &rArr; Cipher
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cipher
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aes_indep_enc
</UL>

<P><STRONG><a name="[7a]"></a>AES128_ECB_encrypt</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, aes.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cipher
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyExpansion
</UL>

<P><STRONG><a name="[7c]"></a>AES128_ECB_decrypt</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, aes.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvCipher
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyExpansion
</UL>

<P><STRONG><a name="[7b]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES128_ECB_decrypt
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES128_ECB_encrypt
</UL>

<P><STRONG><a name="[7d]"></a>__rt_memmove</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__memmove_aligned
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[b2]"></a>__memmove_lastfew</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_v6.o(.text), UNUSED)

<P><STRONG><a name="[b3]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[b4]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[b5]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[7e]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[80]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[b6]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[b7]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[b8]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[82]"></a>__rt_memmove_w</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[7f]"></a>__memmove_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[b9]"></a>__memmove_lastfew_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[81]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove_w
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[ba]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[bb]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[bc]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[37]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[3c]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[bd]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[83]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[be]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[40]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[bf]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[c0]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[c1]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[2f]"></a>StubHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, xuartlite.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = StubHandler &rArr; Xil_Assert
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Xil_Assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> xuartlite.o(.text)
</UL>
<P><STRONG><a name="[79]"></a>KeyExpansion</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = KeyExpansion
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES128_ECB_decrypt
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES128_ECB_encrypt
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES128_ECB_indp_setkey
</UL>

<P><STRONG><a name="[74]"></a>AddRoundKey</STRONG> (Thumb, 140 bytes, Stack size 0 bytes, aes.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvCipher
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cipher
</UL>

<P><STRONG><a name="[73]"></a>Cipher</STRONG> (Thumb, 322 bytes, Stack size 40 bytes, aes.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Cipher
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShiftRows
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddRoundKey
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES128_ECB_encrypt
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES128_ECB_indp_crypto
</UL>

<P><STRONG><a name="[76]"></a>InvCipher</STRONG> (Thumb, 794 bytes, Stack size 168 bytes, aes.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvShiftRows
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvSubBytes
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AddRoundKey
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AES128_ECB_decrypt
</UL>

<P><STRONG><a name="[75]"></a>ShiftRows</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, aes.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cipher
</UL>

<P><STRONG><a name="[78]"></a>InvSubBytes</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, aes.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvCipher
</UL>

<P><STRONG><a name="[77]"></a>InvShiftRows</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, aes.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InvCipher
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
